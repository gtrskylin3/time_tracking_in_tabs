// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
function msToMinutes(ms) {
    return Math.round(ms / 60000);
}

function msToHours(ms) {
    return (ms / 3600000).toFixed(1);
}

function formatTime(ms) {
    const hours = Math.floor(ms / 3600000);
    const minutes = Math.floor((ms % 3600000) / 60000);
    
    if (hours > 0) {
        return `${hours}—á ${minutes}–º`;
    }
    return `${minutes}–º`;
}

function formatTimeHours(ms) {
    const hours = (ms / 3600000).toFixed(1);
    return `${hours}—á`;
}

// –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –¥–ª—è —Å–∞–π—Ç–∞
function getSiteIcon(site) {
    return site.charAt(0).toUpperCase();
}

// –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è –∏–∫–æ–Ω–∫–∏
function getSiteColor(site) {
    const colors = [
        '#667eea', '#764ba2', '#f093fb', '#f5576c',
        '#4facfe', '#00f2fe', '#43e97b', '#38f9d7',
        '#fa709a', '#fee140', '#a8edea', '#fed6e3'
    ];
    let hash = 0;
    for (let i = 0; i < site.length; i++) {
        hash = site.charCodeAt(i) + ((hash << 5) - hash);
    }
    return colors[Math.abs(hash) % colors.length];
}

// –°–æ–∑–¥–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç —Å–∞–π—Ç–∞
function createSiteItem(site, time, maxTime = 0) {
    const siteItem = document.createElement('div');
    siteItem.className = 'site-item';
    
    const progressPercent = maxTime > 0 ? (time / maxTime) * 100 : 0;
    
    siteItem.innerHTML = `
        <div class="site-icon" style="background-color: ${getSiteColor(site)}">
            ${getSiteIcon(site)}
        </div>
        <div class="site-info">
            <div class="site-name">${site}</div>
            <div class="site-time">${formatTime(time)}</div>
            <div class="progress-bar">
                <div class="progress-fill" style="width: ${progressPercent}%"></div>
            </div>
        </div>
    `;
    
    return siteItem;
}

// –°–æ–∑–¥–∞—Ç—å –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
function createEmptyState(message) {
    const emptyState = document.createElement('div');
    emptyState.className = 'empty-state';
    emptyState.innerHTML = `
        <div class="icon">üìä</div>
        <div>${message}</div>
    `;
    return emptyState;
}

// –°–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –Ω–µ–¥–µ–ª–∏
function createWeekChart(weekData) {
    const chartContainer = document.getElementById('week-chart');
    chartContainer.innerHTML = '';
    
    if (!weekData || Object.keys(weekData).length === 0) {
        chartContainer.appendChild(createEmptyState('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é'));
        return;
    }
    
    const maxTime = Math.max(...Object.values(weekData));
    
    Object.entries(weekData)
        .filter(([site]) => site && site !== 'null' && site !== 'undefined')
        .sort(([,a], [,b]) => b - a)
        .forEach(([site, time]) => {
            const chartBar = document.createElement('div');
            chartBar.className = 'chart-bar';
            
            const percentage = maxTime > 0 ? (time / maxTime) * 100 : 0;
            
            chartBar.innerHTML = `
                <div class="chart-label">${site}</div>
                <div class="chart-progress">
                    <div class="chart-fill" style="width: ${percentage}%"></div>
                </div>
                <div class="chart-value">${formatTime(time)}</div>
            `;
            
            chartContainer.appendChild(chartBar);
        });
}

// –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è
function loadTodayData() {
    const today = new Date().toISOString().split('T')[0];
    
    chrome.storage.local.get(['dailyData'], (result) => {
        const dailyData = result.dailyData || {};
        const todayData = dailyData[today] || {};
        
        // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const totalTime = Object.values(todayData).reduce((sum, time) => sum + time, 0);
        const sitesCount = Object.keys(todayData).length;
        
        document.getElementById('today-total-time').textContent = formatTime(totalTime);
        document.getElementById('today-sites-count').textContent = sitesCount;
        
        // –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤
        const sitesContainer = document.getElementById('today-sites');
        sitesContainer.innerHTML = '';
        
        if (sitesCount === 0) {
            sitesContainer.appendChild(createEmptyState('–°–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'));
            return;
        }
        
        const maxTime = Math.max(...Object.values(todayData));
        
        Object.entries(todayData)
            .filter(([site]) => site && site !== 'null' && site !== 'undefined')
            .sort(([,a], [,b]) => b - a)
            .forEach(([site, time]) => {
                sitesContainer.appendChild(createSiteItem(site, time, maxTime));
            });
    });
}

// –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–µ–¥–µ–ª–∏
function loadWeekData() {
    const today = new Date();
    const startOfWeek = new Date(today);
    startOfWeek.setDate(today.getDate() - today.getDay());
    const weekKey = startOfWeek.toISOString().split('T')[0];
    
    chrome.storage.local.get(['weeklyData'], (result) => {
        const weeklyData = result.weeklyData || {};
        const weekData = weeklyData[weekKey] || {};
        
        // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const totalTime = Object.values(weekData).reduce((sum, time) => sum + time, 0);
        const sitesCount = Object.keys(weekData).length;
        
        document.getElementById('week-total-time').textContent = formatTime(totalTime);
        document.getElementById('week-sites-count').textContent = sitesCount;
        
        // –°–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫
        createWeekChart(weekData);
        
        // –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤
        const sitesContainer = document.getElementById('week-sites');
        sitesContainer.innerHTML = '';
        
        if (sitesCount === 0) {
            sitesContainer.appendChild(createEmptyState('–ó–∞ –Ω–µ–¥–µ–ª—é –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'));
            return;
        }
        
        const maxTime = Math.max(...Object.values(weekData));
        
        Object.entries(weekData)
            .filter(([site]) => site && site !== 'null' && site !== 'undefined')
            .sort(([,a], [,b]) => b - a)
            .forEach(([site, time]) => {
                sitesContainer.appendChild(createSiteItem(site, time, maxTime));
            });
    });
}

// –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è
function loadAllTimeData() {
    chrome.storage.local.get(['timeSpent'], (result) => {
        const allTimeData = result.timeSpent || {};
        
        // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const totalTime = Object.values(allTimeData).reduce((sum, time) => sum + time, 0);
        const sitesCount = Object.keys(allTimeData).length;
        
        document.getElementById('alltime-total-time').textContent = formatTimeHours(totalTime);
        document.getElementById('alltime-sites-count').textContent = sitesCount;
        
        // –°–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫
        createAllTimeChart(allTimeData);
        
        // –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤
        const sitesContainer = document.getElementById('alltime-sites');
        sitesContainer.innerHTML = '';
        
        if (sitesCount === 0) {
            sitesContainer.appendChild(createEmptyState('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è'));
            return;
        }
        
        const maxTime = Math.max(...Object.values(allTimeData));
        
        Object.entries(allTimeData)
            .filter(([site]) => site && site !== 'null' && site !== 'undefined')
            .sort(([,a], [,b]) => b - a)
            .forEach(([site, time]) => {
                const siteItem = createSiteItem(site, time, maxTime);
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è "–í—Å–µ –≤—Ä–µ–º—è"
                const timeElement = siteItem.querySelector('.site-time');
                timeElement.textContent = formatTimeHours(time);
                sitesContainer.appendChild(siteItem);
            });
    });
}

// –°–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
function createAllTimeChart(allTimeData) {
    const chartContainer = document.getElementById('alltime-chart');
    chartContainer.innerHTML = '';
    
    if (!allTimeData || Object.keys(allTimeData).length === 0) {
        chartContainer.appendChild(createEmptyState('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è'));
        return;
    }
    
    const maxTime = Math.max(...Object.values(allTimeData));
    
    Object.entries(allTimeData)
        .filter(([site]) => site && site !== 'null' && site !== 'undefined')
        .sort(([,a], [,b]) => b - a)
        .forEach(([site, time]) => {
            const chartBar = document.createElement('div');
            chartBar.className = 'chart-bar';
            
            const percentage = maxTime > 0 ? (time / maxTime) * 100 : 0;
            
            chartBar.innerHTML = `
                <div class="chart-label">${site}</div>
                <div class="chart-progress">
                    <div class="chart-fill" style="width: ${percentage}%"></div>
                </div>
                <div class="chart-value">${formatTimeHours(time)}</div>
            `;
            
            chartContainer.appendChild(chartBar);
        });
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
function initTabs() {
    const tabs = document.querySelectorAll('.tab');
    const contents = document.querySelectorAll('.tab-content');
    
    tabs.forEach(tab => {
        tab.addEventListener('click', () => {
            // –£–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            tabs.forEach(t => t.classList.remove('active'));
            contents.forEach(c => c.classList.remove('active'));
            
            // –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ
            tab.classList.add('active');
            
            // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
            const tabName = tab.dataset.tab;
            const content = document.getElementById(`${tabName}-content`);
            content.classList.add('active');
            
            // –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
            if (tabName === 'today') {
                loadTodayData();
            } else if (tabName === 'week') {
                loadWeekData();
            } else if (tabName === 'alltime') {
                loadAllTimeData();
            }
        });
    });
}

// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
function clearAllData() {
    chrome.storage.local.clear(() => {
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        loadTodayData();
        loadWeekData();
        loadAllTimeData();
        
        // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ
        showNotification('–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!', 'success');
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
function showNotification(message, type = 'info') {
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notification = document.createElement('div');
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: ${type === 'success' ? '#28a745' : '#17a2b8'};
        color: white;
        padding: 12px 20px;
        border-radius: 6px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.2);
        z-index: 1001;
        font-weight: 500;
        animation: slideInRight 0.3s ease;
    `;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        notification.style.animation = 'slideOutRight 0.3s ease';
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    }, 3000);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function initClearModal() {
    const clearBtn = document.getElementById('clear-data-btn');
    const modal = document.getElementById('confirm-modal');
    const confirmBtn = document.getElementById('confirm-clear');
    const cancelBtn = document.getElementById('cancel-clear');
    
    clearBtn.addEventListener('click', () => {
        modal.classList.add('show');
    });
    
    confirmBtn.addEventListener('click', () => {
        clearAllData();
        modal.classList.remove('show');
    });
    
    cancelBtn.addEventListener('click', () => {
        modal.classList.remove('show');
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            modal.classList.remove('show');
        }
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
    initTabs();
    initClearModal();
    loadTodayData();
});